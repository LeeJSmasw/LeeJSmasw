import sys
sys.stdin = open('4408.txt', 'r')

T = int(input())
#아이디어 1 : 리스트 안에 값을 바꿔줘서 0~~~~~~~0 1~~~~~~~~~~~~1
#                                    0       0 11111111111111
#                                               2222222222222
#                                    0       0 12222222222222
               
for tc in range (1, T+1):
    N = int(input())
    result = 0
    cnt = 0
    room = [[],[]]
    room[0] = [0] * 200
    room[1] = [0] * 200                    
    first_list =[]
    last_list = []
    
    for _ in range(N):
        first, last = map(int(input())) # 처음, 돌아가야 할 방 
        first_list.append(first)
        last_list.append(last)
    
    for i in range(N):
        if 
    

    print (f'#{tc} {result}')
# room 을 2차열 배열로 만들어야 하는데
# room[0] = [1 3 5 ~~ 399]
# room[1] = [2 4  ~~ 400]

'''
 모든 학생이 자신의 방으로 돌아가려고 한다.

숙소는 긴 복도를 따라 총 400개의 방이 다음과 같이 배열되어 있다.

 

모든 학생들은 현재 위치에서 자신의 방으로 돌아가려고 하는데, 
만약 두 학생이 자기방으로 돌아가면서 지나는 복도의 구간이 겹치면 두 학생은 동시에 돌아갈 수 없다.

예를 들어 (방1 -> 4) 와 (방3 -> 6) 은 복도 구간이 겹치므로 한 사람은 기다렸다가 다음 차례에 이동해야 한다. 이동하는 데에는 거리에 관계없이 단위 시간이 걸린다고 하자.

각 학생들의 현재 방 위치와 돌아가야 할 방의 위치의 목록이 주어질 때, 최소 몇 단위시간만에 모든 학생들이 이동할 수 있는지를 구하시오.


[입력]
입력은 T(≤10)개의 테스트 케이스로 되어 있다. 각 테스트 케이스의 첫 줄에는 돌아가야 할 학생들의 수 N이 주어진다.

다음 N 줄에는 각 학생의 현재 방 번호(≤400)와 돌아가야 할 방의 번호(≤400)가 주어진다. 주어지는 2N개의 방 번호 중 중복되는 것은 없다.

[출력]
테스트 케이스 T에 대한 결과는 “#T ”을 찍고, 각 테스트 케이스마다 필요한 시간을 한 줄에 하나씩 출력한다.
'''